// =============================
//  Interactive Learning Platform
//  Features: Google Login, Progress Tracking, Quizzes, Rankings
// =============================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 👤 USER — supports Google login
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?     // <-- added for NextAuth compatibility
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  // App-specific relations
  quizResults   QuizResult[]
  progresses    UserProgress[]
  rankings      UserRanking[]
}

// 🔑 ACCOUNT — OAuth accounts (Google, etc.)
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// 📝 SESSION — for NextAuth sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id])
}

// 📘 LESSON — divided into multiple pages
model Lesson {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())

  pages       LessonPage[]
  quizzes     Quiz[]
  progresses  UserProgress[]
}

// 📄 LESSON PAGE — interactive content
model LessonPage {
  id         String   @id @default(cuid())
  lessonId   String
  pageNumber Int
  title      String?
  content    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  lesson     Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([lessonId, pageNumber])
}

// 🧠 QUIZ — linked to lessons
model Quiz {
  id        String        @id @default(cuid())
  lessonId  String
  question  String
  options   Json
  answer    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())

  lesson    Lesson        @relation(fields: [lessonId], references: [id])
  results   QuizResult[]
}

// 🏆 QUIZ RESULT — stores user’s score
model QuizResult {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  score     Int
  createdAt DateTime @default(now())

  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([quizId, userId])
}

// 📊 USER PROGRESS — tracks lesson progress
model UserProgress {
  id           String   @id @default(cuid())
  userId       String
  lessonId     String
  currentPage  Int      @default(1)
  completed    Boolean  @default(false)
  score        Int?
  lastAccessed DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  lesson       Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

// 🧮 USER RANKING — weekly leaderboard
model UserRanking {
  id          String   @id @default(cuid())
  userId      String
  weekStart   DateTime
  totalScore  Int      @default(0)
  rank        Int?
  
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, weekStart])
}
